{"ast":null,"code":"require('text-encoding-polyfill');\nvar StringDecoder = require('string_decoder').StringDecoder;\nfunction defaultDecoder(data) {\n  var decoder = new StringDecoder();\n  var out = decoder.write(data) + decoder.end();\n  return out.replace(/\\0/g, '').trim();\n}\nmodule.exports = createDecoder;\nvar regex = /^(?:ANSI\\s)?(\\d+)$/m;\nfunction createDecoder(encoding, second) {\n  if (!encoding) {\n    return defaultDecoder;\n  }\n  try {\n    new TextDecoder(encoding.trim());\n  } catch (e) {\n    var match = regex.exec(encoding);\n    if (match && !second) {\n      return createDecoder('windows-' + match[1], true);\n    } else {\n      return defaultDecoder;\n    }\n  }\n  return browserDecoder;\n  function browserDecoder(buffer) {\n    var decoder = new TextDecoder(encoding);\n    var out = decoder.decode(buffer, {\n      stream: true\n    }) + decoder.decode();\n    return out.replace(/\\0/g, '').trim();\n  }\n}","map":{"version":3,"names":["require","StringDecoder","defaultDecoder","data","decoder","out","write","end","replace","trim","module","exports","createDecoder","regex","encoding","second","TextDecoder","e","match","exec","browserDecoder","buffer","decode","stream"],"sources":["C:/Users/haosh/desktop/CSE416 projec/MapGroupProject/node_modules/parsedbf/decoder-browser.js"],"sourcesContent":["require('text-encoding-polyfill');\nvar StringDecoder = require('string_decoder').StringDecoder;\nfunction defaultDecoder(data) {\n  var decoder = new StringDecoder();\n  var out = decoder.write(data) + decoder.end();\n  return out.replace(/\\0/g, '').trim();\n}\nmodule.exports = createDecoder;\nvar regex = /^(?:ANSI\\s)?(\\d+)$/m;\nfunction createDecoder(encoding, second) {\n  if (!encoding) {\n    return defaultDecoder;\n  }\n  try {\n    new TextDecoder(encoding.trim());\n  } catch(e) {\n    var match = regex.exec(encoding);\n    if (match && !second) {\n      return createDecoder('windows-' + match[1], true);\n    } else {\n      return defaultDecoder;\n    }\n  }\n  return browserDecoder;\n  function browserDecoder(buffer) {\n    var decoder = new TextDecoder(encoding);\n    var out = decoder.decode(buffer, {\n      stream: true\n    }) + decoder.decode();\n    return out.replace(/\\0/g, '').trim();\n  }\n}\n"],"mappings":"AAAAA,OAAO,CAAC,wBAAwB,CAAC;AACjC,IAAIC,aAAa,GAAGD,OAAO,CAAC,gBAAgB,CAAC,CAACC,aAAa;AAC3D,SAASC,cAAcA,CAACC,IAAI,EAAE;EAC5B,IAAIC,OAAO,GAAG,IAAIH,aAAa,CAAC,CAAC;EACjC,IAAII,GAAG,GAAGD,OAAO,CAACE,KAAK,CAACH,IAAI,CAAC,GAAGC,OAAO,CAACG,GAAG,CAAC,CAAC;EAC7C,OAAOF,GAAG,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;AACtC;AACAC,MAAM,CAACC,OAAO,GAAGC,aAAa;AAC9B,IAAIC,KAAK,GAAG,qBAAqB;AACjC,SAASD,aAAaA,CAACE,QAAQ,EAAEC,MAAM,EAAE;EACvC,IAAI,CAACD,QAAQ,EAAE;IACb,OAAOZ,cAAc;EACvB;EACA,IAAI;IACF,IAAIc,WAAW,CAACF,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAC;EAClC,CAAC,CAAC,OAAMQ,CAAC,EAAE;IACT,IAAIC,KAAK,GAAGL,KAAK,CAACM,IAAI,CAACL,QAAQ,CAAC;IAChC,IAAII,KAAK,IAAI,CAACH,MAAM,EAAE;MACpB,OAAOH,aAAa,CAAC,UAAU,GAAGM,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;IACnD,CAAC,MAAM;MACL,OAAOhB,cAAc;IACvB;EACF;EACA,OAAOkB,cAAc;EACrB,SAASA,cAAcA,CAACC,MAAM,EAAE;IAC9B,IAAIjB,OAAO,GAAG,IAAIY,WAAW,CAACF,QAAQ,CAAC;IACvC,IAAIT,GAAG,GAAGD,OAAO,CAACkB,MAAM,CAACD,MAAM,EAAE;MAC/BE,MAAM,EAAE;IACV,CAAC,CAAC,GAAGnB,OAAO,CAACkB,MAAM,CAAC,CAAC;IACrB,OAAOjB,GAAG,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;EACtC;AACF"},"metadata":{},"sourceType":"script"}