{"ast":null,"code":"var _jsxFileName = \"/Users/yongerfan/Desktop/GroupProject/MapGroupProject/src/App.js\";\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\nimport L from 'leaflet'; // Import Leaflet\nimport React from 'react';\nimport './App.css';\nimport toGeoJSON from 'togeojson';\nimport { DOMParser } from 'xmldom';\nimport { open } from 'shapefile';\nimport dbf from 'dbf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSelectFileButton = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.accept = '.zip,.shp,.json,.kml';\n      fileInput.click();\n    };\n    this.handleFileInputChange = () => {\n      const fileInput = document.getElementById('fileInput');\n      const selectedFile = fileInput.files[0];\n      if (selectedFile) {\n        const fileName = selectedFile.name;\n        const fileExtension = fileName.split('.').pop().toLowerCase();\n        if (fileExtension === 'shp' || fileExtension === 'json' || fileExtension === 'kml') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n          this.setState({\n            fileExtension: fileExtension\n          });\n        } else if (fileExtension === 'zip') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n          this.setState({\n            fileExtension: fileExtension\n          });\n        } else {\n          alert('Please select a valid SHP, GeoJSON, or KML file.');\n        }\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n        const uploadButton = document.getElementById('Select-File-Button');\n        uploadButton.disabled = false;\n      }\n    };\n    this.handleRenderButtonClick = () => {\n      this.setState({\n        rendering: true\n      });\n      if (this.state.fileExtension === \"json\") {\n        this.renderGeoJSON();\n      }\n      if (this.state.fileExtension === \"kml\") {\n        this.renderKMLFile();\n      }\n      if (this.state.fileExtension === \"shp\") {\n        this.renderShpFile();\n      }\n    };\n    this.handleCancelClick = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.value = '';\n      const container = document.getElementById('Container');\n      container.innerHTML = '';\n      if (this.state.map) {\n        this.state.map.remove(); // Remove the old map\n      }\n\n      this.setState({\n        selectedFile: null,\n        map: null\n      });\n      this.handleFileInputChange();\n    };\n    this.loadMap = shpFile => {\n      try {\n        // Create a Leaflet map\n        const map = L.map('Container').setView([0, 0], 5); // Set initial view\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors'\n        }).addTo(map);\n        // Store the new map instance in the component state\n        this.setState({\n          map: map\n        });\n      } catch (error) {\n        console.error('Error handle loading SHP file:', error);\n      }\n    };\n    this.renderShpFile = () => {\n      const reader = new FileReader();\n      if (this.state.map) {\n        const map = this.state.map;\n        reader.onload = async e => {\n          try {\n            const shpData = await open(e.target.result); // Parse the Shapefile\n\n            // Read the DBF file as an ArrayBuffer (assuming it's selected as well)\n            const dbfDataBuffer = await this.readDbfFileAsArrayBuffer(); // Implement this function to read the DBF file\n\n            // Parse the DBF data using the dbf library\n            const dbfData = dbf(dbfDataBuffer);\n\n            // Initialize an empty array to collect GeoJSON features\n            const features = [];\n\n            // Iterate through each feature and add it to the 'features' array\n            while (true) {\n              const {\n                done,\n                value\n              } = await shpData.read();\n              if (done) break;\n              // Use an attribute from the DBF data as the label (replace 'YourLabelField' with the actual field name)\n              const featureId = value.id;\n              const label = dbfData[featureId].YourLabelField; // Replace 'YourLabelField' with the field name you want to use as labels\n\n              // Add the label as a property to the GeoJSON feature\n              value.properties = {\n                label\n              };\n              features.push(value);\n            }\n\n            // Create a GeoJSON feature collection\n            const geojsonData = {\n              type: 'FeatureCollection',\n              features: features\n            };\n\n            // Create a GeoJSON layer and add it to the map\n            const geojsonLayer = L.geoJSON(geojsonData, {\n              onEachFeature: function (feature, layer) {\n                // Bind the label as a popup to each feature on the map\n                if (feature.properties && feature.properties.label) {\n                  layer.bindPopup(feature.properties.label);\n                }\n              }\n            }).addTo(map);\n\n            // Fit the map bounds to the GeoJSON layer\n            map.fitBounds(geojsonLayer.getBounds());\n          } catch (error) {\n            console.error('Error rendering Shapefile:', error);\n          }\n        };\n\n        // Read the selected file as an ArrayBuffer\n        reader.readAsArrayBuffer(this.state.selectedFile);\n      }\n    };\n    // Function to read the DBF file as an ArrayBuffer\n    this.readDbfFileAsArrayBuffer = () => {\n      return new Promise((resolve, reject) => {\n        const dbfReader = new FileReader();\n        dbfReader.onload = e => {\n          resolve(e.target.result);\n        };\n        dbfReader.onerror = error => {\n          reject(error);\n        };\n        // Assuming this.state.selectedDbfFile contains the selected DBF file\n        dbfReader.readAsArrayBuffer(this.state.selectedDbfFile);\n      });\n    };\n    this.renderGeoJSON = () => {\n      const reader = new FileReader();\n      if (this.state.map) {\n        const map = this.state.map;\n        reader.onload = e => {\n          try {\n            const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\n            const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n\n            // Fit the map bounds to the GeoJSON layer\n            map.fitBounds(geojsonLayer.getBounds());\n          } catch (error) {\n            console.error('Error rendering GeoJSON:', error);\n          }\n        };\n        // Read the selected file as text\n        reader.readAsText(this.state.selectedFile);\n      }\n      ;\n    };\n    this.renderKMLFile = () => {\n      const reader = new FileReader();\n      if (this.state.map) {\n        const map = this.state.map;\n        reader.onload = e => {\n          // Read the file content\n          const kmlContent = e.target.result;\n          // Parse the KML data into a GeoJSON object.\n          const geojson = toGeoJSON.kml(new DOMParser().parseFromString(kmlContent, 'text/xml'));\n          // Convert KML to GeoJSON using togeojson library\n          const geojsonLayer = L.geoJSON(geojson).addTo(map);\n          // Fit the map bounds to the GeoJSON layer\n          map.fitBounds(geojsonLayer.getBounds());\n        };\n        reader.readAsText(this.state.selectedFile);\n      }\n    };\n    this.state = {\n      selectedFile: null,\n      map: null,\n      rendering: false,\n      fileExtension: null\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"TitleBox\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        style: {\n          display: 'none'\n        },\n        accept: \".shp, .json, .kml\",\n        onChange: this.handleFileInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"Select-File-Button\",\n          onClick: this.handleSelectFileButton,\n          disabled: !!this.state.selectedFile,\n          children: \"Select File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"Render-File-Button\",\n          onClick: this.handleRenderButtonClick,\n          disabled: !this.state.selectedFile,\n          children: \"Render\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), this.state.selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected File: \", this.state.selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleCancelClick,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"Container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["L","React","toGeoJSON","DOMParser","open","dbf","jsxDEV","_jsxDEV","App","Component","constructor","props","handleSelectFileButton","fileInput","document","getElementById","accept","click","handleFileInputChange","selectedFile","files","fileName","name","fileExtension","split","pop","toLowerCase","setState","uploadButton","disabled","loadMap","alert","handleRenderButtonClick","rendering","state","renderGeoJSON","renderKMLFile","renderShpFile","handleCancelClick","value","container","innerHTML","map","remove","shpFile","setView","tileLayer","attribution","addTo","error","console","reader","FileReader","onload","e","shpData","target","result","dbfDataBuffer","readDbfFileAsArrayBuffer","dbfData","features","done","read","featureId","id","label","YourLabelField","properties","push","geojsonData","type","geojsonLayer","geoJSON","onEachFeature","feature","layer","bindPopup","fitBounds","getBounds","readAsArrayBuffer","Promise","resolve","reject","dbfReader","onerror","selectedDbfFile","JSON","parse","readAsText","kmlContent","geojson","kml","parseFromString","render","children","_jsxFileName","lineNumber","columnNumber","style","display","onChange","onClick"],"sources":["/Users/yongerfan/Desktop/GroupProject/MapGroupProject/src/App.js"],"sourcesContent":["import 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\nimport L from 'leaflet'; // Import Leaflet\nimport React from 'react';\nimport './App.css';\nimport toGeoJSON from 'togeojson';\nimport { DOMParser } from 'xmldom'; \nimport { open } from 'shapefile'; \nimport dbf from 'dbf';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFile: null,\n            map: null,\n            rendering: false,\n            fileExtension: null,\n        };\n    }\n\n    handleSelectFileButton = () => {\n        const fileInput = document.getElementById('fileInput');\n        fileInput.accept = '.zip,.shp,.json,.kml';\n        fileInput.click();\n    };\n\n    handleFileInputChange = () => {\n        const fileInput = document.getElementById('fileInput');\n        const selectedFile = fileInput.files[0];\n        if (selectedFile) {\n            const fileName = selectedFile.name;\n            const fileExtension = fileName.split('.').pop().toLowerCase();\n\n            if (fileExtension === 'shp' || fileExtension === 'json' || fileExtension === 'kml'){\n                this.setState({ selectedFile });\n                const uploadButton = document.getElementById('Select-File-Button');\n                uploadButton.disabled = true;\n                this.loadMap(selectedFile);\n                this.setState({ fileExtension: fileExtension })\n            } else if (fileExtension === 'zip') {\n                this.setState({ selectedFile });\n                const uploadButton = document.getElementById('Select-File-Button');\n                uploadButton.disabled = true;\n                this.loadMap(selectedFile);\n                this.setState({ fileExtension: fileExtension })\n            }\n            else {\n                alert('Please select a valid SHP, GeoJSON, or KML file.');\n            }\n        } else {\n            this.setState({ selectedFile: null });\n            const uploadButton = document.getElementById('Select-File-Button');\n            uploadButton.disabled = false;\n        }\n    };\n    handleRenderButtonClick = () => {\n        this.setState({ rendering: true });\n        if(this.state.fileExtension===\"json\"){\n            this.renderGeoJSON();\n        }\n        if(this.state.fileExtension===\"kml\"){\n            this.renderKMLFile();\n        }\n        if(this.state.fileExtension===\"shp\"){\n            this.renderShpFile();\n        }\n    };\n\n    handleCancelClick = () => {\n        const fileInput = document.getElementById('fileInput');\n        fileInput.value = '';\n        const container = document.getElementById('Container');\n        container.innerHTML = '';\n        \n        if(this.state.map){\n            this.state.map.remove(); // Remove the old map\n            }       \n        this.setState({ selectedFile: null, map: null });\n        this.handleFileInputChange();\n    };\n\n    loadMap = (shpFile) => {\n        try {\n            // Create a Leaflet map\n            const map = L.map('Container').setView([0, 0], 5); // Set initial view\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors',\n            }).addTo(map);\n            // Store the new map instance in the component state\n            this.setState({ map: map });\n        } catch (error) {\n            console.error('Error handle loading SHP file:', error);\n        }\n    };\n\n\n    renderShpFile = () => {\n        const reader = new FileReader();\n        if (this.state.map) {\n          const map = this.state.map;\n          reader.onload = async (e) => {\n            try {\n              const shpData = await open(e.target.result); // Parse the Shapefile\n      \n              // Read the DBF file as an ArrayBuffer (assuming it's selected as well)\n        const dbfDataBuffer = await this.readDbfFileAsArrayBuffer(); // Implement this function to read the DBF file\n\n        // Parse the DBF data using the dbf library\n        const dbfData = dbf(dbfDataBuffer);\n\n              // Initialize an empty array to collect GeoJSON features\n              const features = [];\n      \n              // Iterate through each feature and add it to the 'features' array\n              while (true) {\n                const { done, value } = await shpData.read();\n                if (done) break;\n                // Use an attribute from the DBF data as the label (replace 'YourLabelField' with the actual field name)\n          const featureId = value.id;\n          const label = dbfData[featureId].YourLabelField; // Replace 'YourLabelField' with the field name you want to use as labels\n\n          // Add the label as a property to the GeoJSON feature\n          value.properties = { label };\n                features.push(value);\n              }\n      \n              // Create a GeoJSON feature collection\n              const geojsonData = {\n                type: 'FeatureCollection',\n                features: features,\n              };\n      \n             // Create a GeoJSON layer and add it to the map\n        const geojsonLayer = L.geoJSON(geojsonData, {\n            onEachFeature: function (feature, layer) {\n              // Bind the label as a popup to each feature on the map\n              if (feature.properties && feature.properties.label) {\n                layer.bindPopup(feature.properties.label);\n              }\n            },\n          }).addTo(map);\n      \n              // Fit the map bounds to the GeoJSON layer\n              map.fitBounds(geojsonLayer.getBounds());\n            } catch (error) {\n              console.error('Error rendering Shapefile:', error);\n            }\n          };\n      \n          // Read the selected file as an ArrayBuffer\n          reader.readAsArrayBuffer(this.state.selectedFile);\n        }\n      };\n\n      // Function to read the DBF file as an ArrayBuffer\nreadDbfFileAsArrayBuffer = () => {\n    return new Promise((resolve, reject) => {\n      const dbfReader = new FileReader();\n      dbfReader.onload = (e) => {\n        resolve(e.target.result);\n      };\n      dbfReader.onerror = (error) => {\n        reject(error);\n      };\n      // Assuming this.state.selectedDbfFile contains the selected DBF file\n      dbfReader.readAsArrayBuffer(this.state.selectedDbfFile);\n    });\n  };\n\n    renderGeoJSON = () => {\n        const reader = new FileReader();\n        if (this.state.map) {\n            const map = this.state.map;\n            reader.onload = (e) => {\n                try {\n                    const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\n                    const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n    \n                    // Fit the map bounds to the GeoJSON layer\n                    map.fitBounds(geojsonLayer.getBounds());\n                }\n                catch (error) {\n                    console.error('Error rendering GeoJSON:', error);\n                }\n            }\n            // Read the selected file as text\n        reader.readAsText(this.state.selectedFile);\n        };\n    }\n\n\n    renderKMLFile = () => {\n        const reader = new FileReader();\n        if (this.state.map) {\n            const map = this.state.map;\n            reader.onload = (e) => {\n            // Read the file content\n            const kmlContent = e.target.result;\n            // Parse the KML data into a GeoJSON object.\n            const geojson = toGeoJSON.kml(new DOMParser().parseFromString(kmlContent, 'text/xml'));\n            // Convert KML to GeoJSON using togeojson library\n            const geojsonLayer = L.geoJSON(geojson).addTo(map);\n            // Fit the map bounds to the GeoJSON layer\n            map.fitBounds(geojsonLayer.getBounds());\n            }\n        reader.readAsText(this.state.selectedFile);\n        }\n    }\n    render() {\n        return (\n            <div id=\"root\">\n                <div id=\"TitleBox\">\n                    <h1>Map</h1>\n                </div>\n                <input\n                    type=\"file\"\n                    id=\"fileInput\"\n                    style={{ display: 'none' }}\n                    accept=\".shp, .json, .kml\"\n                    onChange={this.handleFileInputChange}\n                />\n                {(\n                <div>\n                <button\n                    id=\"Select-File-Button\"\n                    onClick={this.handleSelectFileButton}\n                    disabled={!!this.state.selectedFile}\n                >\n                    Select File\n                </button>\n                <button\n                    id=\"Render-File-Button\"\n                    onClick={this.handleRenderButtonClick}\n                    disabled={!this.state.selectedFile}\n                >\n                    Render\n                </button>\n                </div>\n                )}\n                \n                {this.state.selectedFile && (\n                    <div>\n                        <p>Selected File: {this.state.selectedFile.name}</p >\n                        <button onClick={this.handleCancelClick}>Cancel</button>\n                    </div>\n                )}\n                <div id=\"Container\" ></div>\n            </div>\n        );\n    }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}