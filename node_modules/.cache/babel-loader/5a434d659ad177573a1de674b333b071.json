{"ast":null,"code":"import { EPSLN, HALF_PI } from '../constants/values';\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);\n}\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  } else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      } else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  } else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    } else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    } else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));\n      } else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    } else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  } else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));\n    } else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      } else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n}\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};","map":{"version":3,"names":["EPSLN","HALF_PI","sign","msfnz","tsfnz","phi2z","adjust_lon","ssfn_","phit","sinphi","eccen","Math","tan","pow","init","coslat0","cos","lat0","sinlat0","sin","sphere","k0","isNaN","lat_ts","abs","con","cons","sqrt","e","ms1","X0","atan","cosX0","sinX0","forward","p","lon","x","lat","y","sinlat","coslat","A","X","sinX","cosX","ts","rh","dlon","long0","PI","NaN","a","x0","y0","inverse","ce","Chi","c","asin","atan2","names"],"sources":["C:/Users/haosh/desktop/CSE416 projec/MapGroupProject/node_modules/proj4/lib/projections/stere.js"],"sourcesContent":["import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}