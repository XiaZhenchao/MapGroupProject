{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haosh\\\\Desktop\\\\CSE416 projec\\\\MapGroupProject\\\\src\\\\App.js\";\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\nimport L from 'leaflet'; // Import Leaflet\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSelectFileButton = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.click();\n    };\n    this.handleFileInputChange = () => {\n      const fileInput = document.getElementById('fileInput');\n      const selectedFile = fileInput.files[0];\n      if (selectedFile) {\n        const fileName = selectedFile.name;\n        const fileExtension = fileName.split('.').pop().toLowerCase();\n        if (fileExtension === 'shp' || fileExtension === 'json' || fileExtension === 'kml') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n        } else {\n          alert('Please select a valid SHP, GeoJSON, or KML file.');\n        }\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n        const uploadButton = document.getElementById('Select-File-Button');\n        uploadButton.disabled = false;\n      }\n    };\n    this.handleRenderButtonClick = () => {\n      this.setState({\n        rendering: true\n      });\n      this.renderGeoJSON();\n    };\n    this.handleCancelClick = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.value = '';\n      const container = document.getElementById('Container');\n      container.innerHTML = '';\n      if (this.state.map) {\n        this.state.map.remove(); // Remove the old map\n      }\n\n      this.setState({\n        selectedFile: null,\n        map: null\n      });\n      this.handleFileInputChange();\n    };\n    this.loadMap = shpFile => {\n      try {\n        // Create a Leaflet map\n        const map = L.map('Container').setView([0, 0], 5); // Set initial view\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors'\n        }).addTo(map);\n        // Store the new map instance in the component state\n        this.setState({\n          map: map\n        });\n      } catch (error) {\n        console.error('Error handle loading SHP file:', error);\n      }\n    };\n    this.renderGeoJSON = () => {\n      const fileInput = document.getElementById('fileInput');\n      const selectedFile = fileInput.files[0];\n      if (selectedFile) {\n        const fileName = selectedFile.name;\n        const fileExtension = fileName.split('.').pop().toLowerCase();\n        if (fileExtension === 'json') {\n          // Load GeoJSON data\n          const geojsonData = JSON.parse(this.selectedFile); // Parse as GeoJSON\n          const geojsonLayer = L.geoJSON(geojsonData).addTo(this.state.map);\n\n          // Fit the map bounds to the GeoJSON layer\n          this.state.map.fitBounds(geojsonLayer.getBounds());\n        } else if (fileExtension === 'kml') {\n          // Load KML data using leaflet-omnivore\n          L.leafletOmnivore.kml(selectedFile).addTo(this.state.map);\n        } else if (fileExtension === 'shp') {\n          // Load Shapefile data using leaflet-omnivore\n          L.leafletOmnivore.shp(selectedFile).addTo(this.state.map);\n        }\n        // const reader = new FileReader();\n        // if (this.state.map) {\n        //     const map = this.state.map;\n\n        //     reader.onload = (e) => {\n        //         try {\n        //             const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\n        //             const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n\n        //             // Fit the map bounds to the GeoJSON layer\n        //             map.fitBounds(geojsonLayer.getBounds());\n        //         }\n        //         catch (error) {\n        //             console.error('Error rendering GeoJSON:', error);\n        //         }\n        //     }\n        //     // Read the selected file as text\n        // reader.readAsText(this.state.selectedFile);\n        // };\n      }\n    };\n    this.state = {\n      selectedFile: null,\n      map: null,\n      rendering: false\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"TitleBox\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        style: {\n          display: 'none'\n        },\n        accept: \".shp, .json, .kml\",\n        onChange: this.handleFileInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"Select-File-Button\",\n          onClick: this.handleSelectFileButton,\n          disabled: !!this.state.selectedFile,\n          children: \"Select File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"Render-File-Button\",\n          onClick: this.handleRenderButtonClick,\n          disabled: !this.state.selectedFile,\n          children: \"Render\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), this.state.selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected File: \", this.state.selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleCancelClick,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"Container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["L","React","jsxDEV","_jsxDEV","App","Component","constructor","props","handleSelectFileButton","fileInput","document","getElementById","click","handleFileInputChange","selectedFile","files","fileName","name","fileExtension","split","pop","toLowerCase","setState","uploadButton","disabled","loadMap","alert","handleRenderButtonClick","rendering","renderGeoJSON","handleCancelClick","value","container","innerHTML","state","map","remove","shpFile","setView","tileLayer","attribution","addTo","error","console","geojsonData","JSON","parse","geojsonLayer","geoJSON","fitBounds","getBounds","leafletOmnivore","kml","shp","render","id","children","_jsxFileName","lineNumber","columnNumber","type","style","display","accept","onChange","onClick"],"sources":["C:/Users/haosh/Desktop/CSE416 projec/MapGroupProject/src/App.js"],"sourcesContent":["import 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\r\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\r\nimport L from 'leaflet'; // Import Leaflet\r\nimport React from 'react';\r\nimport './App.css';\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedFile: null,\r\n            map: null,\r\n            rendering: false,\r\n        };\r\n    }\r\n\r\n    handleSelectFileButton = () => {\r\n        const fileInput = document.getElementById('fileInput');\r\n        fileInput.click();\r\n    };\r\n\r\n    handleFileInputChange = () => {\r\n        const fileInput = document.getElementById('fileInput');\r\n        const selectedFile = fileInput.files[0];\r\n        if (selectedFile) {\r\n            const fileName = selectedFile.name;\r\n            const fileExtension = fileName.split('.').pop().toLowerCase();\r\n\r\n            if (fileExtension === 'shp' || fileExtension === 'json' || fileExtension === 'kml'){\r\n                this.setState({ selectedFile });\r\n                const uploadButton = document.getElementById('Select-File-Button');\r\n                uploadButton.disabled = true;\r\n                this.loadMap(selectedFile);\r\n            } else {\r\n                alert('Please select a valid SHP, GeoJSON, or KML file.');\r\n            }\r\n        } else {\r\n            this.setState({ selectedFile: null });\r\n            const uploadButton = document.getElementById('Select-File-Button');\r\n            uploadButton.disabled = false;\r\n        }\r\n    };\r\n    handleRenderButtonClick = () => {\r\n        this.setState({ rendering: true });\r\n        this.renderGeoJSON();\r\n      };\r\n\r\n    handleCancelClick = () => {\r\n        const fileInput = document.getElementById('fileInput');\r\n        fileInput.value = '';\r\n        const container = document.getElementById('Container');\r\n        container.innerHTML = '';\r\n        \r\n        if(this.state.map){\r\n            this.state.map.remove(); // Remove the old map\r\n            }       \r\n        this.setState({ selectedFile: null, map: null });\r\n        this.handleFileInputChange();\r\n    };\r\n\r\n    loadMap = (shpFile) => {\r\n        try {\r\n            // Create a Leaflet map\r\n            const map = L.map('Container').setView([0, 0], 5); // Set initial view\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors',\r\n            }).addTo(map);\r\n            // Store the new map instance in the component state\r\n            this.setState({ map: map });\r\n        } catch (error) {\r\n            console.error('Error handle loading SHP file:', error);\r\n        }\r\n    };\r\n\r\n    renderGeoJSON = () => {\r\n        const fileInput = document.getElementById('fileInput');\r\n        const selectedFile = fileInput.files[0];\r\n        if (selectedFile) {\r\n            const fileName = selectedFile.name;\r\n            const fileExtension = fileName.split('.').pop().toLowerCase();\r\n\r\n            if (fileExtension === 'json') {\r\n                // Load GeoJSON data\r\n                const geojsonData = JSON.parse(this.selectedFile); // Parse as GeoJSON\r\n                const geojsonLayer = L.geoJSON(geojsonData).addTo(this.state.map);\r\n\r\n                // Fit the map bounds to the GeoJSON layer\r\n                this.state.map.fitBounds(geojsonLayer.getBounds());\r\n            } else if (fileExtension === 'kml') {\r\n                // Load KML data using leaflet-omnivore\r\n                L.leafletOmnivore.kml(selectedFile).addTo(this.state.map);\r\n            } else if (fileExtension === 'shp') {\r\n                // Load Shapefile data using leaflet-omnivore\r\n                L.leafletOmnivore.shp(selectedFile).addTo(this.state.map);\r\n            }\r\n        // const reader = new FileReader();\r\n        // if (this.state.map) {\r\n        //     const map = this.state.map;\r\n\r\n        //     reader.onload = (e) => {\r\n        //         try {\r\n        //             const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\r\n        //             const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\r\n    \r\n        //             // Fit the map bounds to the GeoJSON layer\r\n        //             map.fitBounds(geojsonLayer.getBounds());\r\n        //         }\r\n        //         catch (error) {\r\n        //             console.error('Error rendering GeoJSON:', error);\r\n        //         }\r\n        //     }\r\n        //     // Read the selected file as text\r\n        // reader.readAsText(this.state.selectedFile);\r\n        // };\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"root\">\r\n                <div id=\"TitleBox\">\r\n                    <h1>Map</h1>\r\n                </div>\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"fileInput\"\r\n                    style={{ display: 'none' }}\r\n                    accept=\".shp, .json, .kml\"\r\n                    onChange={this.handleFileInputChange}\r\n                />\r\n                {(\r\n                <div>\r\n                <button\r\n                    id=\"Select-File-Button\"\r\n                    onClick={this.handleSelectFileButton}\r\n                    disabled={!!this.state.selectedFile}\r\n                >\r\n                    Select File\r\n                </button>\r\n                <button\r\n                    id=\"Render-File-Button\"\r\n                    onClick={this.handleRenderButtonClick}\r\n                    disabled={!this.state.selectedFile}\r\n                >\r\n                    Render\r\n                </button>\r\n                </div>\r\n                )}\r\n                \r\n                {this.state.selectedFile && (\r\n                    <div>\r\n                        <p>Selected File: {this.state.selectedFile.name}</p >\r\n                        <button onClick={this.handleCancelClick}>Cancel</button>\r\n                    </div>\r\n                )}\r\n                <div id=\"Container\" ></div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}