{"ast":null,"code":"import empty from \"./empty\";\nexport default function (length) {\n  if ((length |= 0) < 0) throw new Error(\"invalid length\");\n  var that = this,\n    index = this._array.length - this._index;\n\n  // If the request fits within the remaining buffer, resolve it immediately.\n  if (this._index + length <= this._array.length) {\n    return Promise.resolve(this._array.subarray(this._index, this._index += length));\n  }\n\n  // Otherwise, read chunks repeatedly until the request is fulfilled.\n  var array = new Uint8Array(length);\n  array.set(this._array.subarray(this._index));\n  return function read() {\n    return that._source.read().then(function (result) {\n      // When done, it’s possible the request wasn’t fully fullfilled!\n      // If so, the pre-allocated array is too big and needs slicing.\n      if (result.done) {\n        that._array = empty;\n        that._index = 0;\n        return index > 0 ? array.subarray(0, index) : null;\n      }\n\n      // If this chunk fulfills the request, return the resulting array.\n      if (index + result.value.length >= length) {\n        that._array = result.value;\n        that._index = length - index;\n        array.set(result.value.subarray(0, length - index), index);\n        return array;\n      }\n\n      // Otherwise copy this chunk into the array, then read the next chunk.\n      array.set(result.value, index);\n      index += result.value.length;\n      return read();\n    });\n  }();\n}","map":{"version":3,"names":["empty","length","Error","that","index","_array","_index","Promise","resolve","subarray","array","Uint8Array","set","read","_source","then","result","done","value"],"sources":["C:/Users/haosh/desktop/CSE416 projec/MapGroupProject/node_modules/slice-source/slice.js"],"sourcesContent":["import empty from \"./empty\";\r\n\r\nexport default function(length) {\r\n  if ((length |= 0) < 0) throw new Error(\"invalid length\");\r\n  var that = this, index = this._array.length - this._index;\r\n\r\n  // If the request fits within the remaining buffer, resolve it immediately.\r\n  if (this._index + length <= this._array.length) {\r\n    return Promise.resolve(this._array.subarray(this._index, this._index += length));\r\n  }\r\n\r\n  // Otherwise, read chunks repeatedly until the request is fulfilled.\r\n  var array = new Uint8Array(length);\r\n  array.set(this._array.subarray(this._index));\r\n  return (function read() {\r\n    return that._source.read().then(function(result) {\r\n\r\n      // When done, it’s possible the request wasn’t fully fullfilled!\r\n      // If so, the pre-allocated array is too big and needs slicing.\r\n      if (result.done) {\r\n        that._array = empty;\r\n        that._index = 0;\r\n        return index > 0 ? array.subarray(0, index) : null;\r\n      }\r\n\r\n      // If this chunk fulfills the request, return the resulting array.\r\n      if (index + result.value.length >= length) {\r\n        that._array = result.value;\r\n        that._index = length - index;\r\n        array.set(result.value.subarray(0, length - index), index);\r\n        return array;\r\n      }\r\n\r\n      // Otherwise copy this chunk into the array, then read the next chunk.\r\n      array.set(result.value, index);\r\n      index += result.value.length;\r\n      return read();\r\n    });\r\n  })();\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAE3B,eAAe,UAASC,MAAM,EAAE;EAC9B,IAAI,CAACA,MAAM,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;EACxD,IAAIC,IAAI,GAAG,IAAI;IAAEC,KAAK,GAAG,IAAI,CAACC,MAAM,CAACJ,MAAM,GAAG,IAAI,CAACK,MAAM;;EAEzD;EACA,IAAI,IAAI,CAACA,MAAM,GAAGL,MAAM,IAAI,IAAI,CAACI,MAAM,CAACJ,MAAM,EAAE;IAC9C,OAAOM,OAAO,CAACC,OAAO,CAAC,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,IAAI,CAACH,MAAM,EAAE,IAAI,CAACA,MAAM,IAAIL,MAAM,CAAC,CAAC;EAClF;;EAEA;EACA,IAAIS,KAAK,GAAG,IAAIC,UAAU,CAACV,MAAM,CAAC;EAClCS,KAAK,CAACE,GAAG,CAAC,IAAI,CAACP,MAAM,CAACI,QAAQ,CAAC,IAAI,CAACH,MAAM,CAAC,CAAC;EAC5C,OAAQ,SAASO,IAAIA,CAAA,EAAG;IACtB,OAAOV,IAAI,CAACW,OAAO,CAACD,IAAI,CAAC,CAAC,CAACE,IAAI,CAAC,UAASC,MAAM,EAAE;MAE/C;MACA;MACA,IAAIA,MAAM,CAACC,IAAI,EAAE;QACfd,IAAI,CAACE,MAAM,GAAGL,KAAK;QACnBG,IAAI,CAACG,MAAM,GAAG,CAAC;QACf,OAAOF,KAAK,GAAG,CAAC,GAAGM,KAAK,CAACD,QAAQ,CAAC,CAAC,EAAEL,KAAK,CAAC,GAAG,IAAI;MACpD;;MAEA;MACA,IAAIA,KAAK,GAAGY,MAAM,CAACE,KAAK,CAACjB,MAAM,IAAIA,MAAM,EAAE;QACzCE,IAAI,CAACE,MAAM,GAAGW,MAAM,CAACE,KAAK;QAC1Bf,IAAI,CAACG,MAAM,GAAGL,MAAM,GAAGG,KAAK;QAC5BM,KAAK,CAACE,GAAG,CAACI,MAAM,CAACE,KAAK,CAACT,QAAQ,CAAC,CAAC,EAAER,MAAM,GAAGG,KAAK,CAAC,EAAEA,KAAK,CAAC;QAC1D,OAAOM,KAAK;MACd;;MAEA;MACAA,KAAK,CAACE,GAAG,CAACI,MAAM,CAACE,KAAK,EAAEd,KAAK,CAAC;MAC9BA,KAAK,IAAIY,MAAM,CAACE,KAAK,CAACjB,MAAM;MAC5B,OAAOY,IAAI,CAAC,CAAC;IACf,CAAC,CAAC;EACJ,CAAC,CAAE,CAAC;AACN"},"metadata":{},"sourceType":"module"}