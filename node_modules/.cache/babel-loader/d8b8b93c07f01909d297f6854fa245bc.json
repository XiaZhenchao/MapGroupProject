{"ast":null,"code":"import concat from \"./concat\";\nimport view from \"../view\";\nexport default function () {\n  var that = this;\n  ++that._index;\n  return that._source.slice(12).then(function (array) {\n    if (array == null) return {\n      done: true,\n      value: undefined\n    };\n    var header = view(array);\n\n    // If the record starts with an invalid shape type (see #36), scan ahead in\n    // four-byte increments to find the next valid record, identified by the\n    // expected index, a non-empty content length and a valid shape type.\n    function skip() {\n      return that._source.slice(4).then(function (chunk) {\n        if (chunk == null) return {\n          done: true,\n          value: undefined\n        };\n        header = view(array = concat(array.slice(4), chunk));\n        return header.getInt32(0, false) !== that._index ? skip() : read();\n      });\n    }\n\n    // All records should have at least four bytes (for the record shape type),\n    // so an invalid content length indicates corruption.\n    function read() {\n      var length = header.getInt32(4, false) * 2 - 4,\n        type = header.getInt32(8, true);\n      return length < 0 || type && type !== that._type ? skip() : that._source.slice(length).then(function (chunk) {\n        return {\n          done: false,\n          value: type ? that._parse(view(concat(array.slice(8), chunk))) : null\n        };\n      });\n    }\n    return read();\n  });\n}","map":{"version":3,"names":["concat","view","that","_index","_source","slice","then","array","done","value","undefined","header","skip","chunk","getInt32","read","length","type","_type","_parse"],"sources":["/Users/yongerfan/Desktop/GroupProject/MapGroupProject/node_modules/shapefile/shp/read.js"],"sourcesContent":["import concat from \"./concat\";\nimport view from \"../view\";\n\nexport default function() {\n  var that = this;\n  ++that._index;\n  return that._source.slice(12).then(function(array) {\n    if (array == null) return {done: true, value: undefined};\n    var header = view(array);\n\n    // If the record starts with an invalid shape type (see #36), scan ahead in\n    // four-byte increments to find the next valid record, identified by the\n    // expected index, a non-empty content length and a valid shape type.\n    function skip() {\n      return that._source.slice(4).then(function(chunk) {\n        if (chunk == null) return {done: true, value: undefined};\n        header = view(array = concat(array.slice(4), chunk));\n        return header.getInt32(0, false) !== that._index ? skip() : read();\n      });\n    }\n\n    // All records should have at least four bytes (for the record shape type),\n    // so an invalid content length indicates corruption.\n    function read() {\n      var length = header.getInt32(4, false) * 2 - 4, type = header.getInt32(8, true);\n      return length < 0 || (type && type !== that._type) ? skip() : that._source.slice(length).then(function(chunk) {\n        return {done: false, value: type ? that._parse(view(concat(array.slice(8), chunk))) : null};\n      });\n    }\n\n    return read();\n  });\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,SAAS;AAE1B,eAAe,YAAW;EACxB,IAAIC,IAAI,GAAG,IAAI;EACf,EAAEA,IAAI,CAACC,MAAM;EACb,OAAOD,IAAI,CAACE,OAAO,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,UAASC,KAAK,EAAE;IACjD,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO;MAACC,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAEC;IAAS,CAAC;IACxD,IAAIC,MAAM,GAAGV,IAAI,CAACM,KAAK,CAAC;;IAExB;IACA;IACA;IACA,SAASK,IAAIA,CAAA,EAAG;MACd,OAAOV,IAAI,CAACE,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,UAASO,KAAK,EAAE;QAChD,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO;UAACL,IAAI,EAAE,IAAI;UAAEC,KAAK,EAAEC;QAAS,CAAC;QACxDC,MAAM,GAAGV,IAAI,CAACM,KAAK,GAAGP,MAAM,CAACO,KAAK,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEQ,KAAK,CAAC,CAAC;QACpD,OAAOF,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,KAAKZ,IAAI,CAACC,MAAM,GAAGS,IAAI,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC;MACpE,CAAC,CAAC;IACJ;;IAEA;IACA;IACA,SAASA,IAAIA,CAAA,EAAG;MACd,IAAIC,MAAM,GAAGL,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;QAAEG,IAAI,GAAGN,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC;MAC/E,OAAOE,MAAM,GAAG,CAAC,IAAKC,IAAI,IAAIA,IAAI,KAAKf,IAAI,CAACgB,KAAM,GAAGN,IAAI,CAAC,CAAC,GAAGV,IAAI,CAACE,OAAO,CAACC,KAAK,CAACW,MAAM,CAAC,CAACV,IAAI,CAAC,UAASO,KAAK,EAAE;QAC5G,OAAO;UAACL,IAAI,EAAE,KAAK;UAAEC,KAAK,EAAEQ,IAAI,GAAGf,IAAI,CAACiB,MAAM,CAAClB,IAAI,CAACD,MAAM,CAACO,KAAK,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEQ,KAAK,CAAC,CAAC,CAAC,GAAG;QAAI,CAAC;MAC7F,CAAC,CAAC;IACJ;IAEA,OAAOE,IAAI,CAAC,CAAC;EACf,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}