{"ast":null,"code":"'use strict';\n\n/**\r\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\r\n *\r\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\r\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\r\n *\r\n * @module polyline\r\n */\nvar polyline = {};\nfunction encode(coordinate, factor) {\n  coordinate = Math.round(coordinate * factor);\n  coordinate <<= 1;\n  if (coordinate < 0) {\n    coordinate = ~coordinate;\n  }\n  var output = '';\n  while (coordinate >= 0x20) {\n    output += String.fromCharCode((0x20 | coordinate & 0x1f) + 63);\n    coordinate >>= 5;\n  }\n  output += String.fromCharCode(coordinate + 63);\n  return output;\n}\n\n/**\r\n * Decodes to a [latitude, longitude] coordinates array.\r\n *\r\n * This is adapted from the implementation in Project-OSRM.\r\n *\r\n * @param {String} str\r\n * @param {Number} precision\r\n * @returns {Array}\r\n *\r\n * @see https://github.com/Project-OSRM/osrm-frontend/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\r\n */\npolyline.decode = function (str, precision) {\n  var index = 0,\n    lat = 0,\n    lng = 0,\n    coordinates = [],\n    shift = 0,\n    result = 0,\n    byte = null,\n    latitude_change,\n    longitude_change,\n    factor = Math.pow(10, precision || 5);\n\n  // Coordinates have variable length when encoded, so just keep\n  // track of whether we've hit the end of the string. In each\n  // loop iteration, a single coordinate is decoded.\n  while (index < str.length) {\n    // Reset shift, result, and byte\n    byte = null;\n    shift = 0;\n    result = 0;\n    do {\n      byte = str.charCodeAt(index++) - 63;\n      result |= (byte & 0x1f) << shift;\n      shift += 5;\n    } while (byte >= 0x20);\n    latitude_change = result & 1 ? ~(result >> 1) : result >> 1;\n    shift = result = 0;\n    do {\n      byte = str.charCodeAt(index++) - 63;\n      result |= (byte & 0x1f) << shift;\n      shift += 5;\n    } while (byte >= 0x20);\n    longitude_change = result & 1 ? ~(result >> 1) : result >> 1;\n    lat += latitude_change;\n    lng += longitude_change;\n    coordinates.push([lat / factor, lng / factor]);\n  }\n  return coordinates;\n};\n\n/**\r\n * Encodes the given [latitude, longitude] coordinates array.\r\n *\r\n * @param {Array.<Array.<Number>>} coordinates\r\n * @param {Number} precision\r\n * @returns {String}\r\n */\npolyline.encode = function (coordinates, precision) {\n  if (!coordinates.length) {\n    return '';\n  }\n  var factor = Math.pow(10, precision || 5),\n    output = encode(coordinates[0][0], factor) + encode(coordinates[0][1], factor);\n  for (var i = 1; i < coordinates.length; i++) {\n    var a = coordinates[i],\n      b = coordinates[i - 1];\n    output += encode(a[0] - b[0], factor);\n    output += encode(a[1] - b[1], factor);\n  }\n  return output;\n};\nfunction flipped(coords) {\n  var flipped = [];\n  for (var i = 0; i < coords.length; i++) {\n    flipped.push(coords[i].slice().reverse());\n  }\n  return flipped;\n}\n\n/**\r\n * Encodes a GeoJSON LineString feature/geometry.\r\n *\r\n * @param {Object} geojson\r\n * @param {Number} precision\r\n * @returns {String}\r\n */\npolyline.fromGeoJSON = function (geojson, precision) {\n  if (geojson && geojson.type === 'Feature') {\n    geojson = geojson.geometry;\n  }\n  if (!geojson || geojson.type !== 'LineString') {\n    throw new Error('Input must be a GeoJSON LineString');\n  }\n  return polyline.encode(flipped(geojson.coordinates), precision);\n};\n\n/**\r\n * Decodes to a GeoJSON LineString geometry.\r\n *\r\n * @param {String} str\r\n * @param {Number} precision\r\n * @returns {Object}\r\n */\npolyline.toGeoJSON = function (str, precision) {\n  var coords = polyline.decode(str, precision);\n  return {\n    type: 'LineString',\n    coordinates: flipped(coords)\n  };\n};\nif (typeof module === 'object' && module.exports) {\n  module.exports = polyline;\n}","map":{"version":3,"names":["polyline","encode","coordinate","factor","Math","round","output","String","fromCharCode","decode","str","precision","index","lat","lng","coordinates","shift","result","byte","latitude_change","longitude_change","pow","length","charCodeAt","push","i","a","b","flipped","coords","slice","reverse","fromGeoJSON","geojson","type","geometry","Error","toGeoJSON","module","exports"],"sources":["C:/Users/haosh/Desktop/CSE416 projec/MapGroupProject/node_modules/polyline/src/polyline.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\r\n *\r\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\r\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\r\n *\r\n * @module polyline\r\n */\r\n\r\nvar polyline = {};\r\n\r\nfunction encode(coordinate, factor) {\r\n    coordinate = Math.round(coordinate * factor);\r\n    coordinate <<= 1;\r\n    if (coordinate < 0) {\r\n        coordinate = ~coordinate;\r\n    }\r\n    var output = '';\r\n    while (coordinate >= 0x20) {\r\n        output += String.fromCharCode((0x20 | (coordinate & 0x1f)) + 63);\r\n        coordinate >>= 5;\r\n    }\r\n    output += String.fromCharCode(coordinate + 63);\r\n    return output;\r\n}\r\n\r\n/**\r\n * Decodes to a [latitude, longitude] coordinates array.\r\n *\r\n * This is adapted from the implementation in Project-OSRM.\r\n *\r\n * @param {String} str\r\n * @param {Number} precision\r\n * @returns {Array}\r\n *\r\n * @see https://github.com/Project-OSRM/osrm-frontend/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\r\n */\r\npolyline.decode = function(str, precision) {\r\n    var index = 0,\r\n        lat = 0,\r\n        lng = 0,\r\n        coordinates = [],\r\n        shift = 0,\r\n        result = 0,\r\n        byte = null,\r\n        latitude_change,\r\n        longitude_change,\r\n        factor = Math.pow(10, precision || 5);\r\n\r\n    // Coordinates have variable length when encoded, so just keep\r\n    // track of whether we've hit the end of the string. In each\r\n    // loop iteration, a single coordinate is decoded.\r\n    while (index < str.length) {\r\n\r\n        // Reset shift, result, and byte\r\n        byte = null;\r\n        shift = 0;\r\n        result = 0;\r\n\r\n        do {\r\n            byte = str.charCodeAt(index++) - 63;\r\n            result |= (byte & 0x1f) << shift;\r\n            shift += 5;\r\n        } while (byte >= 0x20);\r\n\r\n        latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n\r\n        shift = result = 0;\r\n\r\n        do {\r\n            byte = str.charCodeAt(index++) - 63;\r\n            result |= (byte & 0x1f) << shift;\r\n            shift += 5;\r\n        } while (byte >= 0x20);\r\n\r\n        longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n\r\n        lat += latitude_change;\r\n        lng += longitude_change;\r\n\r\n        coordinates.push([lat / factor, lng / factor]);\r\n    }\r\n\r\n    return coordinates;\r\n};\r\n\r\n/**\r\n * Encodes the given [latitude, longitude] coordinates array.\r\n *\r\n * @param {Array.<Array.<Number>>} coordinates\r\n * @param {Number} precision\r\n * @returns {String}\r\n */\r\npolyline.encode = function(coordinates, precision) {\r\n    if (!coordinates.length) { return ''; }\r\n\r\n    var factor = Math.pow(10, precision || 5),\r\n        output = encode(coordinates[0][0], factor) + encode(coordinates[0][1], factor);\r\n\r\n    for (var i = 1; i < coordinates.length; i++) {\r\n        var a = coordinates[i], b = coordinates[i - 1];\r\n        output += encode(a[0] - b[0], factor);\r\n        output += encode(a[1] - b[1], factor);\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nfunction flipped(coords) {\r\n    var flipped = [];\r\n    for (var i = 0; i < coords.length; i++) {\r\n        flipped.push(coords[i].slice().reverse());\r\n    }\r\n    return flipped;\r\n}\r\n\r\n/**\r\n * Encodes a GeoJSON LineString feature/geometry.\r\n *\r\n * @param {Object} geojson\r\n * @param {Number} precision\r\n * @returns {String}\r\n */\r\npolyline.fromGeoJSON = function(geojson, precision) {\r\n    if (geojson && geojson.type === 'Feature') {\r\n        geojson = geojson.geometry;\r\n    }\r\n    if (!geojson || geojson.type !== 'LineString') {\r\n        throw new Error('Input must be a GeoJSON LineString');\r\n    }\r\n    return polyline.encode(flipped(geojson.coordinates), precision);\r\n};\r\n\r\n/**\r\n * Decodes to a GeoJSON LineString geometry.\r\n *\r\n * @param {String} str\r\n * @param {Number} precision\r\n * @returns {Object}\r\n */\r\npolyline.toGeoJSON = function(str, precision) {\r\n    var coords = polyline.decode(str, precision);\r\n    return {\r\n        type: 'LineString',\r\n        coordinates: flipped(coords)\r\n    };\r\n};\r\n\r\nif (typeof module === 'object' && module.exports) {\r\n    module.exports = polyline;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}