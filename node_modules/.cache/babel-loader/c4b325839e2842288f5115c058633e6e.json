{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haosh\\\\Desktop\\\\CSE416 projec\\\\MapGroupProject\\\\src\\\\App.js\";\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\nimport L from 'leaflet'; // Import Leaflet\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSelectFileButton = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.click();\n    };\n    this.handleFileInputChange = () => {\n      const fileInput = document.getElementById('fileInput');\n      const selectedFile = fileInput.files[0];\n      if (selectedFile) {\n        const fileName = selectedFile.name;\n        const fileExtension = fileName.split('.').pop().toLowerCase();\n        if (fileExtension === 'shp') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n        } else if (fileExtension === 'json') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n        } else if (fileExtension === 'kml') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n        } else {\n          alert('Please select a valid SHP, GeoJSON, or KML file.');\n        }\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n        const uploadButton = document.getElementById('Select-File-Button');\n        uploadButton.disabled = false;\n      }\n    };\n    this.handleCancelClick = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.value = '';\n      const container = document.getElementById('Container');\n      container.innerHTML = '';\n      this.state.map.remove(); // Remove the old map\n      // Clear the container's content and any CSS classes\n\n      container.innerHTML = '';\n      container.className = '';\n\n      // Reset the selected file and enable the file input\n      this.setState({\n        selectedFile: null\n      });\n      const uploadButton = document.getElementById('Select-File-Button');\n      uploadButton.disabled = false;\n      this.handleFileInputChange();\n    };\n    this.loadMap = shpFile => {\n      try {\n        const container = document.getElementById('Container');\n\n        // Create a Leaflet map\n        const map = L.map('Container').setView([0, 0], 10); // Set initial view\n        console.log(map);\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors'\n        }).addTo(map);\n        L.leafletOmnivore.geojsonLoad(shpFile, null, L.geoJson()).on('ready', () => {\n          // Handle any additional map setup or data processing here\n        }).addTo(map);\n        // L.leafletOmnivore\n        //     .shp(shpFile)\n        //     .on('ready', () => {\n        //     })\n        //     .addTo(map);\n        console.log(map);\n        // Store the new map instance in the component state\n        this.setState({\n          map\n        });\n      } catch (error) {\n        console.error('Error handle loading SHP file:', error);\n      }\n    };\n    this.state = {\n      selectedFile: null,\n      map: null\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"TitleBox\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        style: {\n          display: 'none'\n        },\n        accept: \".shp, .json, .kml\",\n        onChange: this.handleFileInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"Select-File-Button\",\n        onClick: this.handleSelectFileButton,\n        disabled: !!this.state.selectedFile,\n        children: \"Select File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), this.state.selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected File: \", this.state.selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleCancelClick,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"Container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["L","React","jsxDEV","_jsxDEV","App","Component","constructor","props","handleSelectFileButton","fileInput","document","getElementById","click","handleFileInputChange","selectedFile","files","fileName","name","fileExtension","split","pop","toLowerCase","setState","uploadButton","disabled","loadMap","alert","handleCancelClick","value","container","innerHTML","state","map","remove","className","shpFile","setView","console","log","tileLayer","attribution","addTo","leafletOmnivore","geojsonLoad","geoJson","on","error","render","id","children","_jsxFileName","lineNumber","columnNumber","type","style","display","accept","onChange","onClick"],"sources":["C:/Users/haosh/Desktop/CSE416 projec/MapGroupProject/src/App.js"],"sourcesContent":["import 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\r\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\r\nimport L from 'leaflet'; // Import Leaflet\r\nimport React from 'react';\r\nimport './App.css';\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedFile: null,\r\n            map: null,\r\n        };\r\n    }\r\n\r\n    handleSelectFileButton = () => {\r\n        const fileInput = document.getElementById('fileInput');\r\n        fileInput.click();\r\n    };\r\n\r\n    handleFileInputChange = () => {\r\n        const fileInput = document.getElementById('fileInput');\r\n        const selectedFile = fileInput.files[0];\r\n        if (selectedFile) {\r\n            const fileName = selectedFile.name;\r\n            const fileExtension = fileName.split('.').pop().toLowerCase();\r\n\r\n            if (fileExtension === 'shp') {\r\n                this.setState({ selectedFile });\r\n                const uploadButton = document.getElementById('Select-File-Button');\r\n                uploadButton.disabled = true;\r\n                this.loadMap(selectedFile);\r\n            } else if (fileExtension === 'json') {\r\n                this.setState({ selectedFile });\r\n                const uploadButton = document.getElementById('Select-File-Button');\r\n                uploadButton.disabled = true;\r\n                this.loadMap(selectedFile);\r\n            } else if (fileExtension === 'kml') {\r\n                this.setState({ selectedFile });\r\n                const uploadButton = document.getElementById('Select-File-Button');\r\n                uploadButton.disabled = true;\r\n                this.loadMap(selectedFile);\r\n            } else {\r\n                alert('Please select a valid SHP, GeoJSON, or KML file.');\r\n            }\r\n        } else {\r\n            this.setState({ selectedFile: null });\r\n            const uploadButton = document.getElementById('Select-File-Button');\r\n            uploadButton.disabled = false;\r\n        }\r\n    };\r\n\r\n    handleCancelClick = () => {\r\n        const fileInput = document.getElementById('fileInput');\r\n        fileInput.value = '';\r\n        const container = document.getElementById('Container');\r\n        container.innerHTML = '';\r\n        \r\n        this.state.map.remove(); // Remove the old map\r\n        // Clear the container's content and any CSS classes\r\n        \r\n        container.innerHTML = '';\r\n        container.className = '';\r\n\r\n         // Reset the selected file and enable the file input\r\n        this.setState({ selectedFile: null });\r\n        const uploadButton = document.getElementById('Select-File-Button');\r\n        uploadButton.disabled = false;\r\n        this.handleFileInputChange();\r\n    };\r\n\r\n    loadMap = (shpFile) => {\r\n        try {\r\n            const container = document.getElementById('Container');\r\n            \r\n            // Create a Leaflet map\r\n            const map = L.map('Container').setView([0, 0], 10); // Set initial view\r\n            console.log(map)\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors',\r\n            }).addTo(map);\r\n            L.leafletOmnivore.geojsonLoad(shpFile, null, L.geoJson()).on('ready', () => {\r\n                // Handle any additional map setup or data processing here\r\n            }).addTo(map);\r\n            // L.leafletOmnivore\r\n            //     .shp(shpFile)\r\n            //     .on('ready', () => {\r\n            //     })\r\n            //     .addTo(map);\r\n            console.log(map)\r\n            // Store the new map instance in the component state\r\n            this.setState({ map });\r\n        } catch (error) {\r\n            console.error('Error handle loading SHP file:', error);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"root\">\r\n                <div id=\"TitleBox\">\r\n                    <h1>Map</h1>\r\n                </div>\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"fileInput\"\r\n                    style={{ display: 'none' }}\r\n                    accept=\".shp, .json, .kml\"\r\n                    onChange={this.handleFileInputChange}\r\n                />\r\n                <button\r\n                    id=\"Select-File-Button\"\r\n                    onClick={this.handleSelectFileButton}\r\n                    disabled={!!this.state.selectedFile}\r\n                >\r\n                    Select File\r\n                </button>\r\n                {this.state.selectedFile && (\r\n                    <div>\r\n                        <p>Selected File: {this.state.selectedFile.name}</p >\r\n                        <button onClick={this.handleCancelClick}>Cancel</button>\r\n                    </div>\r\n                )}\r\n                <div id=\"Container\" ></div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}