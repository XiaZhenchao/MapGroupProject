{"ast":null,"code":"var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport { sExpr } from './process';\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && inName in obj) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\nfunction d2r(input) {\n  return input * D2R;\n}\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n      if (axis[0].indexOf('north') !== -1 || (axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north') {\n        axisOrder += 'n';\n      } else if (axis[0].indexOf('south') !== -1 || (axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south') {\n        axisOrder += 's';\n      } else if (axis[0].indexOf('east') !== -1 || (axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east') {\n        axisOrder += 'e';\n      } else if (axis[0].indexOf('west') !== -1 || (axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west') {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert * wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, -6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, -8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65') || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function (a) {\n    return rename(wkt, a);\n  };\n  var list = [['standard_parallel_1', 'Standard_Parallel_1'], ['standard_parallel_1', 'Latitude of 1st standard parallel'], ['standard_parallel_2', 'Standard_Parallel_2'], ['standard_parallel_2', 'Latitude of 2nd standard parallel'], ['false_easting', 'False_Easting'], ['false_easting', 'False easting'], ['false-easting', 'Easting at false origin'], ['false_northing', 'False_Northing'], ['false_northing', 'False northing'], ['false_northing', 'Northing at false origin'], ['central_meridian', 'Central_Meridian'], ['central_meridian', 'Longitude of natural origin'], ['central_meridian', 'Longitude of false origin'], ['latitude_of_origin', 'Latitude_Of_Origin'], ['latitude_of_origin', 'Central_Parallel'], ['latitude_of_origin', 'Latitude of natural origin'], ['latitude_of_origin', 'Latitude of false origin'], ['scale_factor', 'Scale_Factor'], ['k0', 'scale_factor'], ['latitude_of_center', 'Latitude_Of_Center'], ['latitude_of_center', 'Latitude_of_center'], ['lat0', 'latitude_of_center', d2r], ['longitude_of_center', 'Longitude_Of_Center'], ['longitude_of_center', 'Longitude_of_center'], ['longc', 'longitude_of_center', d2r], ['x0', 'false_easting', toMeter], ['y0', 'false_northing', toMeter], ['long0', 'central_meridian', d2r], ['lat0', 'latitude_of_origin', d2r], ['lat0', 'standard_parallel_1', d2r], ['lat1', 'standard_parallel_1', d2r], ['lat2', 'standard_parallel_2', d2r], ['azimuth', 'Azimuth'], ['alpha', 'azimuth', d2r], ['srsCode', 'name']];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === 'Polar_Stereographic') {\n    wkt.lat_ts = wkt.lat0;\n    wkt.lat0 = d2r(wkt.lat0 > 0 ? 90 : -90);\n  }\n}\nexport default function (wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}","map":{"version":3,"names":["D2R","parser","sExpr","rename","obj","params","outName","inName","length","d2r","input","cleanWKT","wkt","type","projName","local","PROJECTION","Object","keys","AXIS","axisOrder","i","ii","axis","toLowerCase","indexOf","UNIT","units","name","convert","DATUM","SPHEROID","to_meter","a","geogcs","GEOGCS","datumCode","slice","sphere","ellps","replace","rf","parseFloat","TOWGS84","datum_params","b","isFinite","toMeter","ratio","renamer","list","forEach","long0","longc","lat_ts","lat1","lat0","lisp","shift","unshift"],"sources":["C:/Users/haosh/desktop/CSE416 projec/MapGroupProject/node_modules/wkt-parser/index.js"],"sourcesContent":["var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\n        axisOrder += 'n';\n      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\n        axisOrder += 's';\n      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\n        axisOrder += 'e';\n      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_1', 'Latitude of 1st standard parallel'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\n    ['false_easting', 'False_Easting'],\n    ['false_easting', 'False easting'],\n    ['false-easting', 'Easting at false origin'],\n    ['false_northing', 'False_Northing'],\n    ['false_northing', 'False northing'],\n    ['false_northing', 'Northing at false origin'],\n    ['central_meridian', 'Central_Meridian'],\n    ['central_meridian', 'Longitude of natural origin'],\n    ['central_meridian', 'Longitude of false origin'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['latitude_of_origin', 'Latitude of natural origin'],\n    ['latitude_of_origin', 'Latitude of false origin'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === 'Polar_Stereographic') {\n    wkt.lat_ts = wkt.lat0;\n    wkt.lat0 = d2r(wkt.lat0 > 0 ? 90 : -90);\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}