{"ast":null,"code":"var fieldSize = require('./fieldsize'),\n  lib = require('./lib'),\n  fields = require('./fields');\n\n/**\r\n * @param {Array} data\r\n * @param {Array} meta\r\n * @returns {Object} view\r\n */\nmodule.exports = function structure(data, meta) {\n  var field_meta = meta || fields.multi(data),\n    fieldDescLength = 32 * field_meta.length + 1,\n    bytesPerRecord = fields.bytesPer(field_meta),\n    // deleted flag\n    buffer = new ArrayBuffer(\n    // field header\n    fieldDescLength +\n    // header\n    32 +\n    // contents\n    bytesPerRecord * data.length +\n    // EOF marker\n    1),\n    now = new Date(),\n    view = new DataView(buffer);\n\n  // version number - dBase III\n  view.setUint8(0, 0x03);\n  // date of last update\n  view.setUint8(1, now.getFullYear() - 1900);\n  view.setUint8(2, now.getMonth());\n  view.setUint8(3, now.getDate());\n  // number of records\n  view.setUint32(4, data.length, true);\n\n  // length of header\n  var headerLength = fieldDescLength + 32;\n  view.setUint16(8, headerLength, true);\n  // length of each record\n  view.setUint16(10, bytesPerRecord, true);\n\n  // Terminator\n  view.setInt8(32 + fieldDescLength - 1, 0x0D);\n  field_meta.forEach(function (f, i) {\n    // field name\n    f.name.split('').slice(0, 8).forEach(function (c, x) {\n      view.setInt8(32 + i * 32 + x, c.charCodeAt(0));\n    });\n    // field type\n    view.setInt8(32 + i * 32 + 11, f.type.charCodeAt(0));\n    // field length\n    view.setInt8(32 + i * 32 + 16, f.size);\n    if (f.type == 'N') view.setInt8(32 + i * 32 + 17, 3);\n  });\n  offset = fieldDescLength + 32;\n  data.forEach(function (row, num) {\n    // delete flag: this is not deleted\n    view.setUint8(offset, 32);\n    offset++;\n    field_meta.forEach(function (f) {\n      var val = row[f.name];\n      if (val === null || typeof val === 'undefined') val = '';\n      switch (f.type) {\n        // boolean\n        case 'L':\n          view.setUint8(offset, val ? 84 : 70);\n          offset++;\n          break;\n\n        // date\n        case 'D':\n          offset = lib.writeField(view, 8, lib.lpad(val.toString(), 8, ' '), offset);\n          break;\n\n        // number\n        case 'N':\n          offset = lib.writeField(view, f.size, lib.lpad(val.toString(), f.size, ' ').substr(0, 18), offset);\n          break;\n\n        // string\n        case 'C':\n          offset = lib.writeField(view, f.size, lib.rpad(val.toString(), f.size, ' '), offset);\n          break;\n        default:\n          throw new Error('Unknown field type');\n      }\n    });\n  });\n\n  // EOF flag\n  view.setUint8(offset, 0x1A);\n  return view;\n};","map":{"version":3,"names":["fieldSize","require","lib","fields","module","exports","structure","data","meta","field_meta","multi","fieldDescLength","length","bytesPerRecord","bytesPer","buffer","ArrayBuffer","now","Date","view","DataView","setUint8","getFullYear","getMonth","getDate","setUint32","headerLength","setUint16","setInt8","forEach","f","i","name","split","slice","c","x","charCodeAt","type","size","offset","row","num","val","writeField","lpad","toString","substr","rpad","Error"],"sources":["C:/Users/haosh/desktop/CSE416 projec/MapGroupProject/node_modules/dbf/src/structure.js"],"sourcesContent":["var fieldSize = require('./fieldsize'),\r\n    lib = require('./lib'),\r\n    fields = require('./fields');\r\n\r\n/**\r\n * @param {Array} data\r\n * @param {Array} meta\r\n * @returns {Object} view\r\n */\r\nmodule.exports = function structure(data, meta) {\r\n\r\n    var field_meta = meta || fields.multi(data),\r\n        fieldDescLength = (32 * field_meta.length) + 1,\r\n        bytesPerRecord = fields.bytesPer(field_meta), // deleted flag\r\n        buffer = new ArrayBuffer(\r\n            // field header\r\n            fieldDescLength +\r\n            // header\r\n            32 +\r\n            // contents\r\n            (bytesPerRecord * data.length) +\r\n            // EOF marker\r\n            1\r\n    ),\r\n        now = new Date(),\r\n        view = new DataView(buffer);\r\n\r\n    // version number - dBase III\r\n    view.setUint8(0, 0x03);\r\n    // date of last update\r\n    view.setUint8(1, now.getFullYear() - 1900);\r\n    view.setUint8(2, now.getMonth());\r\n    view.setUint8(3, now.getDate());\r\n    // number of records\r\n    view.setUint32(4, data.length, true);\r\n\r\n    // length of header\r\n    var headerLength = fieldDescLength + 32;\r\n    view.setUint16(8, headerLength, true);\r\n    // length of each record\r\n    view.setUint16(10, bytesPerRecord, true);\r\n\r\n    // Terminator\r\n    view.setInt8(32 + fieldDescLength - 1, 0x0D);\r\n\r\n    field_meta.forEach(function(f, i) {\r\n        // field name\r\n        f.name.split('').slice(0, 8).forEach(function(c, x) {\r\n            view.setInt8(32 + i * 32 + x, c.charCodeAt(0));\r\n        });\r\n        // field type\r\n        view.setInt8(32 + i * 32 + 11, f.type.charCodeAt(0));\r\n        // field length\r\n        view.setInt8(32 + i * 32 + 16, f.size);\r\n        if (f.type == 'N') view.setInt8(32 + i * 32 + 17, 3);\r\n    });\r\n\r\n    offset = fieldDescLength + 32;\r\n\r\n    data.forEach(function(row, num) {\r\n        // delete flag: this is not deleted\r\n        view.setUint8(offset, 32);\r\n        offset++;\r\n        field_meta.forEach(function(f) {\r\n            var val = row[f.name];\r\n            if (val === null || typeof val === 'undefined') val = '';\r\n\r\n            switch (f.type) {\r\n                // boolean\r\n                case 'L':\r\n                    view.setUint8(offset, val ? 84 : 70);\r\n                    offset++;\r\n                    break;\r\n\r\n                // date\r\n                case 'D':\r\n                    offset = lib.writeField(view, 8,\r\n                        lib.lpad(val.toString(), 8, ' '), offset);\r\n                    break;\r\n\r\n                // number\r\n                case 'N':\r\n                    offset = lib.writeField(view, f.size,\r\n                        lib.lpad(val.toString(), f.size, ' ').substr(0, 18),\r\n                        offset);\r\n                    break;\r\n\r\n                // string\r\n                case 'C':\r\n                    offset = lib.writeField(view, f.size,\r\n                        lib.rpad(val.toString(), f.size, ' '), offset);\r\n                    break;\r\n\r\n                default:\r\n                    throw new Error('Unknown field type');\r\n            }\r\n        });\r\n    });\r\n\r\n    // EOF flag\r\n    view.setUint8(offset, 0x1A);\r\n\r\n    return view;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}