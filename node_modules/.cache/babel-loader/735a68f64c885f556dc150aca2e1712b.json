{"ast":null,"code":"var _jsxFileName = \"/Users/yongerfan/Desktop/GroupProject/MapGroupProject/src/App.js\";\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\nimport L from 'leaflet'; // Import Leaflet\nimport React from 'react';\nimport './App.css';\nimport toGeoJSON from 'togeojson';\nimport { DOMParser } from 'xmldom';\n//import shp from 'shp-write';\n//import shapefile from 'shapefile';\nimport { open } from 'shapefile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSelectFileButton = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.accept = '.zip,.shp,.json,.kml';\n      fileInput.click();\n    };\n    this.handleFileInputChange = () => {\n      const fileInput = document.getElementById('fileInput');\n      const selectedFile = fileInput.files[0];\n      if (selectedFile) {\n        const fileName = selectedFile.name;\n        const fileExtension = fileName.split('.').pop().toLowerCase();\n        if (fileExtension === 'shp' || fileExtension === 'json' || fileExtension === 'kml') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n          this.setState({\n            fileExtension: fileExtension\n          });\n        } else if (fileExtension === 'zip') {\n          this.setState({\n            selectedFile\n          });\n          const uploadButton = document.getElementById('Select-File-Button');\n          uploadButton.disabled = true;\n          this.loadMap(selectedFile);\n          this.setState({\n            fileExtension: fileExtension\n          });\n        } else {\n          alert('Please select a valid SHP, GeoJSON, or KML file.');\n        }\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n        const uploadButton = document.getElementById('Select-File-Button');\n        uploadButton.disabled = false;\n      }\n    };\n    this.handleRenderButtonClick = () => {\n      this.setState({\n        rendering: true\n      });\n      if (this.state.fileExtension === \"json\") {\n        this.renderGeoJSON();\n      }\n      if (this.state.fileExtension === \"kml\") {\n        this.renderKMLFile();\n      }\n      if (this.state.fileExtension === \"shp\") {\n        this.renderShpFile();\n      }\n    };\n    this.handleCancelClick = () => {\n      const fileInput = document.getElementById('fileInput');\n      fileInput.value = '';\n      const container = document.getElementById('Container');\n      container.innerHTML = '';\n      if (this.state.map) {\n        this.state.map.remove(); // Remove the old map\n      }\n\n      this.setState({\n        selectedFile: null,\n        map: null\n      });\n      this.handleFileInputChange();\n    };\n    this.loadMap = shpFile => {\n      try {\n        // Create a Leaflet map\n        const map = L.map('Container').setView([0, 0], 5); // Set initial view\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors'\n        }).addTo(map);\n        // Store the new map instance in the component state\n        this.setState({\n          map: map\n        });\n      } catch (error) {\n        console.error('Error handle loading SHP file:', error);\n      }\n    };\n    this.renderShpFile = () => {\n      const reader = new FileReader();\n      if (this.state.map) {\n        const map = this.state.map;\n        reader.onload = e => {\n          try {\n            /*const shapefileData = shp.parseZip(e.target.result);\n            const geojsonData = shp.combine([shapefileData]);\n            // const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON*/\n            shapefile.open(e.target.result).then(function (result) {\n              const geojsonData = {\n                type: 'FeatureCollection',\n                features: result.features\n              };\n              const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n\n              // Fit the map bounds to the GeoJSON layer\n              map.fitBounds(geojsonLayer.getBounds());\n            });\n          } catch (error) {\n            console.error('Error rendering GeoJSON:', error);\n          }\n        };\n        // Read the selected file as text\n        //reader.readAsText(this.state.selectedFile);\n        reader.readAsArrayBuffer(this.state.selectedFile);\n      }\n      ;\n    };\n    this.renderGeoJSON = () => {\n      const reader = new FileReader();\n      if (this.state.map) {\n        const map = this.state.map;\n        reader.onload = e => {\n          try {\n            const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\n            const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n\n            // Fit the map bounds to the GeoJSON layer\n            map.fitBounds(geojsonLayer.getBounds());\n          } catch (error) {\n            console.error('Error rendering GeoJSON:', error);\n          }\n        };\n        // Read the selected file as text\n        reader.readAsText(this.state.selectedFile);\n      }\n      ;\n    };\n    this.renderGeoJSON = () => {\n      const reader = new FileReader();\n      if (this.state.map) {\n        const map = this.state.map;\n        reader.onload = e => {\n          try {\n            const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\n            const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n\n            // Fit the map bounds to the GeoJSON layer\n            map.fitBounds(geojsonLayer.getBounds());\n          } catch (error) {\n            console.error('Error rendering GeoJSON:', error);\n          }\n        };\n        // Read the selected file as text\n        reader.readAsText(this.state.selectedFile);\n      }\n      ;\n    };\n    this.renderKMLFile = () => {\n      const reader = new FileReader();\n      if (this.state.map) {\n        const map = this.state.map;\n        reader.onload = e => {\n          // Read the file content\n          const kmlContent = e.target.result;\n          // Parse the KML data into a GeoJSON object.\n          const geojson = toGeoJSON.kml(new DOMParser().parseFromString(kmlContent, 'text/xml'));\n          // Convert KML to GeoJSON using togeojson library\n          const geojsonLayer = L.geoJSON(geojson).addTo(map);\n          // Fit the map bounds to the GeoJSON layer\n          map.fitBounds(geojsonLayer.getBounds());\n        };\n        reader.readAsText(this.state.selectedFile);\n      }\n    };\n    this.state = {\n      selectedFile: null,\n      map: null,\n      rendering: false,\n      fileExtension: null\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"TitleBox\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        style: {\n          display: 'none'\n        },\n        accept: \".shp, .json, .kml\",\n        onChange: this.handleFileInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"Select-File-Button\",\n          onClick: this.handleSelectFileButton,\n          disabled: !!this.state.selectedFile,\n          children: \"Select File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"Render-File-Button\",\n          onClick: this.handleRenderButtonClick,\n          disabled: !this.state.selectedFile,\n          children: \"Render\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), this.state.selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected File: \", this.state.selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleCancelClick,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"Container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["L","React","toGeoJSON","DOMParser","open","jsxDEV","_jsxDEV","App","Component","constructor","props","handleSelectFileButton","fileInput","document","getElementById","accept","click","handleFileInputChange","selectedFile","files","fileName","name","fileExtension","split","pop","toLowerCase","setState","uploadButton","disabled","loadMap","alert","handleRenderButtonClick","rendering","state","renderGeoJSON","renderKMLFile","renderShpFile","handleCancelClick","value","container","innerHTML","map","remove","shpFile","setView","tileLayer","attribution","addTo","error","console","reader","FileReader","onload","e","shapefile","target","result","then","geojsonData","type","features","geojsonLayer","geoJSON","fitBounds","getBounds","readAsArrayBuffer","JSON","parse","readAsText","kmlContent","geojson","kml","parseFromString","render","id","children","_jsxFileName","lineNumber","columnNumber","style","display","onChange","onClick"],"sources":["/Users/yongerfan/Desktop/GroupProject/MapGroupProject/src/App.js"],"sourcesContent":["import 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport 'leaflet-omnivore'; // Import Leaflet Omnivore\nimport L from 'leaflet'; // Import Leaflet\nimport React from 'react';\nimport './App.css';\nimport toGeoJSON from 'togeojson';\nimport { DOMParser } from 'xmldom'; \n//import shp from 'shp-write';\n//import shapefile from 'shapefile';\nimport {open} from 'shapefile';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFile: null,\n            map: null,\n            rendering: false,\n            fileExtension: null,\n        };\n    }\n\n    handleSelectFileButton = () => {\n        const fileInput = document.getElementById('fileInput');\n        fileInput.accept = '.zip,.shp,.json,.kml';\n        fileInput.click();\n    };\n\n    handleFileInputChange = () => {\n        const fileInput = document.getElementById('fileInput');\n        const selectedFile = fileInput.files[0];\n        if (selectedFile) {\n            const fileName = selectedFile.name;\n            const fileExtension = fileName.split('.').pop().toLowerCase();\n\n            if (fileExtension === 'shp' || fileExtension === 'json' || fileExtension === 'kml'){\n                this.setState({ selectedFile });\n                const uploadButton = document.getElementById('Select-File-Button');\n                uploadButton.disabled = true;\n                this.loadMap(selectedFile);\n                this.setState({ fileExtension: fileExtension })\n            } else if (fileExtension === 'zip') {\n                this.setState({ selectedFile });\n                const uploadButton = document.getElementById('Select-File-Button');\n                uploadButton.disabled = true;\n                this.loadMap(selectedFile);\n                this.setState({ fileExtension: fileExtension })\n            }\n            else {\n                alert('Please select a valid SHP, GeoJSON, or KML file.');\n            }\n        } else {\n            this.setState({ selectedFile: null });\n            const uploadButton = document.getElementById('Select-File-Button');\n            uploadButton.disabled = false;\n        }\n    };\n    handleRenderButtonClick = () => {\n        this.setState({ rendering: true });\n        if(this.state.fileExtension===\"json\"){\n            this.renderGeoJSON();\n        }\n        if(this.state.fileExtension===\"kml\"){\n            this.renderKMLFile();\n        }\n        if(this.state.fileExtension===\"shp\"){\n            this.renderShpFile();\n        }\n    };\n\n    handleCancelClick = () => {\n        const fileInput = document.getElementById('fileInput');\n        fileInput.value = '';\n        const container = document.getElementById('Container');\n        container.innerHTML = '';\n        \n        if(this.state.map){\n            this.state.map.remove(); // Remove the old map\n            }       \n        this.setState({ selectedFile: null, map: null });\n        this.handleFileInputChange();\n    };\n\n    loadMap = (shpFile) => {\n        try {\n            // Create a Leaflet map\n            const map = L.map('Container').setView([0, 0], 5); // Set initial view\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: '&copy; < a href=\" \">OpenStreetMap</ a> contributors',\n            }).addTo(map);\n            // Store the new map instance in the component state\n            this.setState({ map: map });\n        } catch (error) {\n            console.error('Error handle loading SHP file:', error);\n        }\n    };\n\n    renderShpFile = () => {\n        const reader = new FileReader();\n        if (this.state.map) {\n            const map = this.state.map;\n            reader.onload = (e) => {\n                try {\n                    /*const shapefileData = shp.parseZip(e.target.result);\n                    const geojsonData = shp.combine([shapefileData]);\n                   // const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON*/\n                   shapefile.open(e.target.result).then(function(result) {\n                    const geojsonData = {\n                        type: 'FeatureCollection',\n                        features:result.features,\n                    };\n                   \n                    const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n    \n                    // Fit the map bounds to the GeoJSON layer\n                    map.fitBounds(geojsonLayer.getBounds());\n                });\n                }\n                catch (error) {\n                    console.error('Error rendering GeoJSON:', error);\n                }\n            };\n            // Read the selected file as text\n        //reader.readAsText(this.state.selectedFile);\n        reader.readAsArrayBuffer(this.state.selectedFile);\n        };\n    }\n\n    renderGeoJSON = () => {\n        const reader = new FileReader();\n        if (this.state.map) {\n            const map = this.state.map;\n            reader.onload = (e) => {\n                try {\n                    const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\n                    const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n    \n                    // Fit the map bounds to the GeoJSON layer\n                    map.fitBounds(geojsonLayer.getBounds());\n                }\n                catch (error) {\n                    console.error('Error rendering GeoJSON:', error);\n                }\n            }\n            // Read the selected file as text\n        reader.readAsText(this.state.selectedFile);\n        };\n    }\n\n    renderGeoJSON = () => {\n        const reader = new FileReader();\n        if (this.state.map) {\n            const map = this.state.map;\n            reader.onload = (e) => {\n                try {\n                    const geojsonData = JSON.parse(e.target.result); // Parse as GeoJSON\n                    const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n    \n                    // Fit the map bounds to the GeoJSON layer\n                    map.fitBounds(geojsonLayer.getBounds());\n                }\n                catch (error) {\n                    console.error('Error rendering GeoJSON:', error);\n                }\n            }\n            // Read the selected file as text\n        reader.readAsText(this.state.selectedFile);\n        };\n    }\n    renderKMLFile = () => {\n        const reader = new FileReader();\n        if (this.state.map) {\n            const map = this.state.map;\n            reader.onload = (e) => {\n            // Read the file content\n            const kmlContent = e.target.result;\n            // Parse the KML data into a GeoJSON object.\n            const geojson = toGeoJSON.kml(new DOMParser().parseFromString(kmlContent, 'text/xml'));\n            // Convert KML to GeoJSON using togeojson library\n            const geojsonLayer = L.geoJSON(geojson).addTo(map);\n            // Fit the map bounds to the GeoJSON layer\n            map.fitBounds(geojsonLayer.getBounds());\n            }\n        reader.readAsText(this.state.selectedFile);\n        }\n    }\n    render() {\n        return (\n            <div id=\"root\">\n                <div id=\"TitleBox\">\n                    <h1>Map</h1>\n                </div>\n                <input\n                    type=\"file\"\n                    id=\"fileInput\"\n                    style={{ display: 'none' }}\n                    accept=\".shp, .json, .kml\"\n                    onChange={this.handleFileInputChange}\n                />\n                {(\n                <div>\n                <button\n                    id=\"Select-File-Button\"\n                    onClick={this.handleSelectFileButton}\n                    disabled={!!this.state.selectedFile}\n                >\n                    Select File\n                </button>\n                <button\n                    id=\"Render-File-Button\"\n                    onClick={this.handleRenderButtonClick}\n                    disabled={!this.state.selectedFile}\n                >\n                    Render\n                </button>\n                </div>\n                )}\n                \n                {this.state.selectedFile && (\n                    <div>\n                        <p>Selected File: {this.state.selectedFile.name}</p >\n                        <button onClick={this.handleCancelClick}>Cancel</button>\n                    </div>\n                )}\n                <div id=\"Container\" ></div>\n            </div>\n        );\n    }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}